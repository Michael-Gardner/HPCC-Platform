name: Build ECLIDE

on:
  workflow_call:
    inputs:
      community_ref:
        type: string
        description: 'community_[semver]'
        required: true
      eclide_ref:
        type: string
        description: 'eclide_[semver]'
        required: true
      os:
        type: string
        description: 'Operating System'
        required: false
        default: 'windows-2022'

jobs:
  build-bare-metal-eclide:
    name: Build Bare Metal ECLIDE
    runs-on: "windows-2022"
    steps:
 
      - name: Checkout HPCC-Platform
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.community_ref }}
          submodules: recursive
          path: ./HPCC-Platform
 
      - name: Checkout ECLIDE
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/ECLIDE
          ref: ${{ inputs.eclide_ref }}
          submodules: recursive
          path: ./ECLIDE
          fetch-depth: 0

      - name: "Install html-help-workshop"
        shell: "bash"
        run: |
          choco install html-help-workshop
          mkdir -p ./ECLIDE/docs }}
          ## might be error with }} talk with Ming
          ls -la ./ECLIDE


        # - name: "Fetch html artifacts"
        # uses: actions/download-artifact@v4
        # with:
        #   name: html-help-documents
        #   merge-multiple: true
    
        # - name: "Fetch clienttools artifact"
        #   uses: actions/download-artifact@v4
        #   with:
        #     name: Windows-Clienttools
        #     merge-multiple: true
  
        # - name: "Create EN_US CHM file"
        #   shell: "bash"
        #   run: |
        #     html_doc=$(find . -type f -name "html_help_EN_US-*")
        #     mkdir html_help_EN_US
        #     7z x $html_doc -ohtml_help_EN_US
        #     cd html_help_EN_US/html_help
        #     # Chocolate install a package but it is not in PATH variable. Use path full of hhc.exe
        #     # hhc.exe return non-zero. Appending "true" to work-around
        #     C:/"Program Files (x86)"/"HTML Help Workshop"/hhc.exe htmlhelp.hhp || true
        #     mv htmlhelp.chm ECLReference.chm
        #     cp ECLReference.chm ../../ECLIDE/docs/
  
        # - name: "Create PT_BR CHM file"
        #   shell: "bash"
        #   run: |
        #     html_doc=$(find . -type f -name "html_help_PT_BR-*")
        #     mkdir html_help_PT_BR
        #     7z x $html_doc -ohtml_help_PT_BR
        #     cd html_help_PT_BR/html_help
        #     # Chocolate install a package but it is not in PATH variable. Use path full of hhc.exe
        #     # hhc.exe return non-zero. Appending "true" to work-around
        #     C:/"Program Files (x86)"/"HTML Help Workshop"/hhc.exe htmlhelp.hhp || true
        #     mv htmlhelp.chm ECLReference_PT_BR.chm
        #     cp ECLReference_PT_BR.chm ../../ECLIDE/docs/

      - name: Load code signing
        shell: "pwsh"
        run: |
          mkdir -p ./sign
          cd sign
          $pfxPath = "hpcc_code_signing.pfx"
          $encodedBytes = [System.Convert]::FromBase64String("${{ secrets.SIGNING_CERTIFICATE }}")
          $currentDirectory = Get-Location
          $certificatePath = Join-Path -Path $currentDirectory -ChildPath $pfxPath
          [IO.File]::WriteAllBytes("$certificatePath", $encodedBytes)
          CertUtil -p ${{ secrets.SIGNING_CERTIFICATE_PASSPHRASE }} hpcc_code_signing.pfx

      - name: "Build ECLIDE"
        run: |
          cd ECLIDE
          mkdir -p ./build
          cd ./build
          cmake -A Win32 -S ../ -B .
          cmake --build . --config RelWithDebInfo --target package --parallel

      - name: Sign ECLIDE Package
        shell: "pwsh"
        run: |
          cd ./ECLIDE/build
          C:\"Program Files (x86)"\"Microsoft SDKs"\ClickOnce\SignTool\signtool.exe sign /debug /f ../../sign/hpcc_code_signing.pfx /p ${{ secrets.SIGNING_CERTIFICATE_PASSPHRASE}} /t http://timestamp.digicert.com /fd SHA256 hpccsystems-eclide*.exe

      - name: Upload Assets
        uses: ncipollo/release-action@v1.14.0
        with:
          allowUpdates: true
          generateReleaseNotes: false
          prerelease: ${{ contains(github.ref, '-rc') }}
          artifacts: "./ECLIDE/build/*.exe"
      
      - name: Upload Assets to Jfrog
        if: ${{ github.repository_owner == 'hpcc-systems' }}
        shell: bash
        run: |
          cd ./ECLIDE/build
          packages=($(ls -1 hpccsystems-*.exe ))
          for _package in ${packages[@]}; do
            curl -u${{ secrets.JFROG_USERNAME }}:${{ secrets.JFROG_PASSWORD }} "https://${{ secrets.JFROG_REGISTRY }}/hpccpl-windows-local/LN/windows/x86_64/${_package}" -T ${_package}
          done

      - name: Upload Error Logs
        if: ${{ failure() || cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: winsow-2022-eclide-logs
          path: ./ECLIDE/build/**/*.log