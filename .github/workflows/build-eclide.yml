name: Build ECLIDE

on:
  workflow_call:
    inputs:
      community_ref:
        type: string
        description: 'community_[semver]'
        required: true
      eclide_ref:
        type: string
        description: 'eclide_[semver]'
        required: true
      os:
        type: string
        description: 'Operating System'
        required: false
        default: 'windows-2022'

jobs:
  build-bare-metal-eclide:
    name: Build Bare Metal ECLIDE
    runs-on: "windows-2022"
    steps:
 
      - name: VCPKG check
        shell: "bash"
        run: |
          echo "VCPKG_INSTALLATION_ROOT: $VCPKG_INSTALLATION_ROOT"
          echo "VCPKG_DEFAULT_TRIPLET: $VCPKG_DEFAULT_TRIPLET"
          echo "VCPKG_TARGET_TRIPLET: $VCPKG_TARGET_TRIPLET"
          echo "VCPKG_APPLOCAL_DEPS: $VCPKG_APPLOCAL_DEPS"
          echo "VCPKG_APPLOCAL_DEPS_DEBUG: $VCPKG_APPLOCAL_DEPS_DEBUG"
          echo "VCPKG_APPLOCAL_DEPS_RELEASE: $VCPKG_APPLOCAL_DEPS_RELEASE"
          echo "VCPKG_APPLOCAL_DEPS_RELWITHDEBINFO: $VCPKG_APPLOCAL_DEPS_RELWITHDEBINFO"
          echo "VCPKG_APPLOCAL_DEPS_MINSIZEREL: $VCPKG_APPLOCAL_DEPS_MINSIZEREL"
          ls -la $VCPKG_INSTALLATION_ROOT

      - name: Checkout HPCC-Platform
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.community_ref }}
          submodules: recursive
          path: ./HPCC-Platform
 
      - name: Checkout ECLIDE
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/ECLIDE
          ref: ${{ inputs.eclide_ref }}
          submodules: recursive
          path: ./ECLIDE
          fetch-depth: 0

      - name: Install html-help-workshop
        shell: "bash"
        run: |
          choco install html-help-workshop
          mkdir -p ./ECLIDE/docs

      - name: vcpkg bootstrap
        shell: "bash"
        run: |
          ./HPCC-Platform/vcpkg/bootstrap-vcpkg.sh

      - name: Setup NuGet credentials
        shell: "bash"
        run: |
            `./HPCC-Platform/vcpkg/vcpkg fetch nuget | tail -n 1` \
            sources add \
            -name "GitHub" \
            -source "https://nuget.pkg.github.com/hpcc-systems/index.json" \
            -storepasswordincleartext \
            -username "${{ github.repository_owner }}" \
            -password "${{ secrets.GITHUB_TOKEN }}"

      - name: Load code signing
        shell: "pwsh"
        run: |
          mkdir -p ./sign
          cd sign
          $pfxPath = "hpcc_code_signing.pfx"
          $encodedBytes = [System.Convert]::FromBase64String("${{ secrets.SIGNING_CERTIFICATE }}")
          $currentDirectory = Get-Location
          $certificatePath = Join-Path -Path $currentDirectory -ChildPath $pfxPath
          [IO.File]::WriteAllBytes("$certificatePath", $encodedBytes)
          CertUtil -p ${{ secrets.SIGNING_CERTIFICATE_PASSPHRASE }} hpcc_code_signing.pfx

      - name: Build ECLIDE helper documentation
        shell: "bash"
        run: |
          cd HPCC-Platform
          mkdir -p ./build
          cd ./build
          cmake -S ../ -B . -DMAKE_DOCS_ONLY=ON -DDOCS_AUTO=ON -DUSE_NATIVE_LIBRARIES=ON -DDOC_LANGS=ALL -T host=x64 -A x64 -DUSE_OPTIONAL=OFF -DUSE_PARQUET=OFF -DUSE_AZURE=OFF -DUSE_CASSANDRA=OFF -DUSE_JAVA=OFF -DUSE_OPENLDAP=OFF
          cmake --build . --config Release --target all --parallel $NUMBER_OF_PROCESSORS

      - name: Move ECLIDE helper documentation
        shell: "bash"
        run: |
          cp -v HPCC-Platform/build/docs/EN_US/EclipseHelp/* ECLIDE/docs/
          cp -v HPCC-Platform/build/docs/EN_US/HTMLHelp/* ECLIDE/docs/
          cp -v HPCC-Platform/build/docs/PT_BR/HTMLHelp/* ECLIDE/docs/
          ls -la ECLIDE/docs/

      - name: Build 64 bit clienttools for embedding
        shell: "bash"
        run: |
          rm -rf ./HPCC-Platform/build/CMakeFiles
          rm -f ./HPCC-Platform/build/CMakeCache.txt
          cd ./HPCC-Platform/build
          cmake -S ../ -B . -T host=x64 -A x64 -DUSE_OPTIONAL=OFF -DCLIENTTOOLS_ONLY=ON -DUSE_AZURE=OFF -DUSE_CASSANDRA=OFF -DUSE_PARQUET=OFF -DUSE_JAVA=OFF -DUSE_OPENLDAP=OFF
          cmake --build . --config Release --parallel $NUMBER_OF_PROCESSORS --target package
          cp -v hpccsystems-clienttools-community_*.exe ../../
          ls -la ../../

      - name: Build ECLIDE
        shell: "bash"
        run: |
          cd ECLIDE
          mkdir -p ./build
          cd ./build
          cmake -A Win32 -S ../ -B .
          cmake --build . --config RelWithDebInfo --target package --parallel $NUMBER_OF_PROCESSORS

      - name: Sign ECLIDE Package
        shell: "pwsh"
        run: |
          cd ./ECLIDE/build
          C:\"Program Files (x86)"\"Microsoft SDKs"\ClickOnce\SignTool\signtool.exe sign /debug /f ../../sign/hpcc_code_signing.pfx /p ${{ secrets.SIGNING_CERTIFICATE_PASSPHRASE}} /t http://timestamp.digicert.com /fd SHA256 hpccsystems-eclide*.exe

      - name: Upload Assets
        uses: ncipollo/release-action@v1.14.0
        with:
          allowUpdates: true
          generateReleaseNotes: false
          prerelease: ${{ contains(github.ref, '-rc') }}
          artifacts: "./ECLIDE/build/*.exe"
      
      - name: Upload Assets to Jfrog
        if: ${{ github.repository_owner == 'hpcc-systems' }}
        shell: bash
        run: |
          cd ./ECLIDE/build
          packages=($(ls -1 hpccsystems-*.exe ))
          for _package in ${packages[@]}; do
            curl -u${{ secrets.JFROG_USERNAME }}:${{ secrets.JFROG_PASSWORD }} "https://${{ secrets.JFROG_REGISTRY }}/hpccpl-windows-local/LN/windows/x86_64/${_package}" -T ${_package}
          done

      - name: Upload Error Logs
        if: ${{ failure() || cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: winsow-2022-eclide-logs
          path: ./ECLIDE/build/**/*.log