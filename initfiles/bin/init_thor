#!/bin/bash
################################################################################
#    HPCC SYSTEMS software Copyright (C) 2012 HPCC Systems.
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
################################################################################

deploydir=$(dirname $(type -path $0))
PATH_PRE=$(type -path hpcc_setenv)
source ${PATH_PRE}

INSTALL_DIR=$(dirname ${PATH_PRE})/..
source  ${INSTALL_DIR}/etc/init.d/hpcc_common

component=$(basename $PWD)
export logfile="${LOG_DIR}/${component}/${component}_init_`date +%Y_%m_%d_%H_%M_%S`.log"

PID_NAME="$PID/$(basename $PWD).pid"

export SENTINEL="thor.sentinel"
rm -f ${SENTINEL}

if [[ -z "$deploydir" ]]; then
    deploydir=$(pwd -P)
fi

instancedir=$(pwd -P)
source $instancedir/setvars

if [[ ! -z ${THORPRIMARY} ]]; then
    groupName=${THORPRIMARY}
else
    groupName=${THORNAME}
fi
log "Creating symbolic link to ${deploydir}/thormaster_${THORNAME}"
ln -s -f $deploydir/thormaster${LCR} thormaster_$THORNAME

ENV_DIR=$(cat ${HPCC_CONFIG} | sed -n "/\[DEFAULT\]/,/\[/p" | grep "^configs=" | sed -e 's/^configs=//')

contains()
{
    local n=$#
    local value=${!n}
    local i=0
    for ((i=1;i < ${n};i++)); do
        if [[ "${!i}" == "${value}" ]]; then
            echo "${i}"
            return 0
        fi
    done
    echo "0"
    return 1
}

makethorgroup()
{
    if [[ -z "$localthorportinc" ]]; then
        localthorportinc=200
    fi
    rm -f thorgroup

    declare -a ports_used
    declare -a hosts
    for slave in $(cat slaves); do
        p=$(contains "${hosts[@]}" "${slave}")
        if [[ 0 == ${p} ]]; then
            echo "${slave}:${THORSLAVEPORT}" >> thorgroup
            p=$((${#hosts[@]}+1))
            ports[${p}]=${THORSLAVEPORT}
            hosts=(${hosts[@]} $slave)
        else
            newport=$((${ports[${p}]}+${localthorportinc}))
            echo "${slave}:${newport}" >> thorgroup
            ports[${p}]=${newport}
        fi
    done
}

kill_slaves()
{
    if [[ "$localthor" = "true" ]]; then
        log "Killing local slaves"
        killall -9 thorslave_${component} 2> /dev/null
    else
        # we want to kill only slaves that have already been started in run_thor
        if [[ -r $instancedir/uslaves.start ]]; then
            log "Killing remote slaves"
            nslaves=$(cat $instancedir/uslaves.start 2> /dev/null | wc -l)
            $deploydir/frunssh $instancedir/uslaves.start "/bin/sh -c '$deploydir/init_thorslave stop %a $THORMASTER $THORMASTERPORT $logdir $instancedir $deploydir $THORNAME $PATH_PRE $logredirect'" -i:$SSHidentityfile -u:$SSHusername -pe:$SSHpassword -t:$SSHtimeout -a:$SSHretries -n:$nslaves 2>&1 | egrep -v "no process killed"
            log "slaves stopped"
        fi
    fi

    log "Removing uslaves.start file"
    rm -f $instancedir/uslaves.start > /dev/null 2>&1
}

killed()
{
    log "Stopping"
    kill_process ${PID_NAME} thormaster_${component} 30
    kill_slaves
    rm -f $INIT_PID_NAME $instancedir/uslaves.start > /dev/null 2>&1
    exit 255
}

trap "killed" SIGINT SIGTERM
# attempt to clean up any old slaves
kill_slaves
thorpid=0

while [[ 1 ]]; do
    # update slaves file in case state of environment has been altered since last run
    daliadmin server=$DALISERVER dfsgroup ${groupName} slaves
    errcode=$?
    if [[ 0 != ${errcode} ]]; then
    log "failed to lookup dali group for $groupName"
        exit 1
    fi
    makethorgroup
    sort $instancedir/slaves | uniq > $instancedir/uslaves.start

    log "--------------------------"
    log "starting thorslaves ..."

    logpthtail=$(date +%m_%d_%Y_%H_%M_%S)
    logredirect="$logdir/init_thorslave_$logpthtail.log"
    # Would be simpler, if there was simple way to test if ip is local and get rid of 'localthor' setting
    if [[ "$localthor" = "true" ]]; then
        slaveip=$(head -n 1 $instancedir/uslaves.start)
        $deploydir/init_thorslave start $slaveip $THORMASTER $THORMASTERPORT $logdir $instancedir $deploydir $THORNAME $PATH_PRE $logredirect
    else
        nslaves=$(cat $instancedir/uslaves.start | wc -l)
        $deploydir/frunssh $instancedir/uslaves.start "/bin/sh -c '$deploydir/init_thorslave start %a $THORMASTER $THORMASTERPORT $logdir $instancedir $deploydir $THORNAME $PATH_PRE $logredirect'" -i:$SSHidentityfile -u:$SSHusername -pe:$SSHpassword -t:$SSHtimeout -a:$SSHretries -n:$nslaves 2>&1
        FRUNSSH_RC=$?
        if [[ ${FRUNSSH_RC} -gt 0 ]]; then
            log "Error ${FRUNSSH_RC} in frunssh"
            log "Please check $(dirname ${logdir})/frunssh for more details"
            # clean up any slaves it was able to reach
            killed
        fi
    fi

    log "thormaster cmd : $instancedir/thormaster_$THORNAME MASTER=$THORMASTER:$THORMASTERPORT"
    nohup $instancedir/thormaster_$THORNAME MASTER=$THORMASTER:$THORMASTERPORT 2> /dev/null 1>/dev/null &

    thorpid=$!
    if [[ "$thorpid" -ne "0" ]]; then
        log thormaster$LCR process started pid = $thorpid

        echo $thorpid > $PID_NAME
        wait $thorpid
        errcode=$?
        case $errcode in
        # TEC_Clean
        0)  log "Thormaster ($thorpid) Exited cleanly"
            rm -f $instancedir/uslaves.start $PID_NAME $INIT_PID_NAME > /dev/null 2>&1
            exit 0
            ;;
        # TEC_CtrlC
        1)  log "Thormaster ($thorpid) Interrupted, Ctrl-C caught"
            killed
            ;;
        # TEC_Idle, TEC_Watchdog, TEC_Swap, TEC_DaliDown
        2|3|5|6)    [[ $errcode -eq 2 ]] && log "Thormaster ($thorpid) Idle"
                    [[ $errcode -eq 3 ]] && log "Thormaster ($thorpid) Lost connection to slave(s)"
                    [[ $errcode -eq 5 ]] && log "Thormaster ($thorpid) Swap node required"
                    [[ $errcode -eq 6 ]] && log "Thormaster ($thorpid) Unable to connect to Dali"
                    echo 'stopping thorslave(s) for restart'
                    kill_slaves
                    if [[ 0 != $autoSwapNode ]]; then
                        log "Running autoswap $THORNAME :: ($thorpid)"
                        swapnode auto $DALISERVER $component
                        errcode=$?
                        if [[ 0 != ${errcode} ]]; then
                            log "auto swap node failed, errcode=${errcode}"
                            killed
                        fi
                    fi
                # restarting thormaster
                ;;
        # TEC_SlaveInit
        4)  log "Thormaster ($thorpid) Slaves failed to initialize"
            log "Shutting down"
            killed
            ;;
        *)  log "Thormaster ($thorpid) Unknown error code.  Stopping"
            killed
            ;;
        esac
    else
        log "failed to start thormaster$LCR, pausing for 30 seconds"
        sleep 30
        kill_slaves
    fi
    if [[ ! -e $SENTINEL ]]; then
        log "$SENTINEL has been removed or thormaster did not fully start - script stopping"
        exit 0
    fi
done
