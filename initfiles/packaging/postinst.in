#!/bin/bash 
################################################################################
#    HPCC SYSTEMS software Copyright (C) 2012 HPCC SystemsÂ®.
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
################################################################################

#NOTE:  Postinst, preinst, postrm, prerm should be compliant with sh not bash

. @INSTALL_DIR@/etc/init.d/init-functions

installConfs ()
{
    fileName=$1
    configPath=$2
    mkdir -p ${configPath}
    mkdir -p ${configPath}/rpmnew

    printf "Installing %-44s ..." "${fileName}"

    if [ ! -e ${configPath}/${fileName} ]; then
        # Always install new files without comment
        cp -f @INSTALL_DIR@/${configPath}/rpmnew/${fileName} ${configPath}/${fileName}
        cp -f @INSTALL_DIR@/${configPath}/rpmnew/${fileName} ${configPath}/rpmnew/${fileName}
        log_success_msg
    elif [ -e ${configPath}/rpmnew/${fileName} ] && ! `diff -q ${configPath}/rpmnew/${fileName} @INSTALL_DIR@/${configPath}/rpmnew/${fileName} >/dev/null` ; then
        # There are changes in the default config since last installed
        if ! `diff -q ${configPath}/rpmnew/${fileName} ${configPath}/${fileName} >/dev/null` ; then
            # User has made their own changes too, so don't overwrite
            log_failure_msg "Not overwriting modified configuration file ${fileName}"
        else
            # User has NOT made their own changes - ok to update
            cp -f @INSTALL_DIR@/${configPath}/rpmnew/${fileName} ${configPath}/${fileName}
            cp -f @INSTALL_DIR@/${configPath}/rpmnew/${fileName} ${configPath}/rpmnew/${fileName}
            log_success_msg "Updated configuration file ${fileName}"
        fi
    else
        log_success_msg "No changes to configuration file ${fileName}"
    fi
}

check_user ()
{
    USER=$1
    id ${USER} > /dev/null
    if [ $? -eq 0 ];
    then
        return 1
    else
        return 0
    fi
}

check_group ()
{
    GROUP=$1
    touch /tmp/file.$$
    chgrp ${GROUP} /tmp/file.$$ > /dev/null 2>&1
    if [ `stat -c %G /tmp/file.$$ 2>/dev/null || stat -f %Sg /tmp/file.$$ 2>/dev/null` = "${GROUP}" ];
    then
        rm -rf /tmp/file.$$
        return 1
    else
        rm -rf /tmp/file.$$
        return 0
    fi
}

add_user ()
{
    USER=$1
    GROUP=$2
    HOMEPATH=$3
    check_user ${USER}
    UFND=$?
    check_group ${GROUP}
    GFND=$?
    if [ ${GFND} -eq 1 ];
    then
        if [ ${UFND} -eq 1 ];
        then
            printf "Adding %s to group %s ..." "${USER}" "${GROUP}"
            CURRGROUPS=`id -nG ${USER} | tr ' ' ','`
            usermod -G ${CURRGROUPS},${GROUP} -c "${USER} Runtime User" ${USER}
            if [ $? -eq 0 ];
            then
                log_success_msg
            else
                log_failure_msg "Failed to add ${USER} to group ${GROUP}."
                return 1
            fi
        else
            printf "Adding %s to system ..." "${USER}"
            useradd -s ${SHELL} -r -m -d ${HOMEPATH} -g ${GROUP} -c "${USER} Runtime User" ${USER}
            passwd -l ${USER} 1>/dev/null 2>&1
            if [ $? -eq 0 ];
            then
                log_success_msg
            else
                log_failure_msg "Failed to add ${USER} to system."
                return 1
            fi
        fi
    else
        printf "Creating group %s ..." "${GROUP}"
        groupadd ${GROUP}
        if [ $? -eq 0 ];
        then
            log_success_msg
        else
            log_failure_msg "Failed to add group ${GROUP} to system."
            return 1
        fi
        if [ ${UFND} -eq 1 ];
        then
            printf "Adding %s to group %s ..." "${USER}" "${GROUP}"
            CURRGROUPS=`id -nG ${USER} | tr ' ' ','`
            usermod -G ${CURRGROUPS},${GROUP} -c "${USER} Runtime User" ${USER}
            if [ $? -eq 0 ];
            then
                log_success_msg
            else
                log_failure_msg "Failed to add ${USER} to group ${GROUP}."
                return 1
            fi
        else
            printf "Adding %s to system ..." "${USER}"
            useradd -s ${SHELL} -r -m -d ${HOMEPATH} -g ${GROUP} -c "${USER} Runtime User" ${USER}
            passwd -l ${USER} 1>/dev/null 2>&1
            if [ $? -eq 0 ];
            then
                log_success_msg
            else
                log_failure_msg "Failed to add ${USER} to system."
                return 1
            fi

        fi
    fi
    return 0
}


installFile ()
{
    fileNameFrom=$1
    fileNameTo=$2
    symlink=$3
    createDir=$4
    option="-f"
    if [ ${symlink} != 0 ];then
        option="-sf"
    fi

    if [ ! -z "${createDir}" ]; then
        if [ ! -d ${createDir} ];then
            mkdir -p ${createDir}
        fi
    fi

    cp ${option} ${fileNameFrom} ${fileNameTo} 2> /dev/null

    printf "Installing %-44s ..." "${fileNameTo}"
    if [ -L ${fileNameTo} ]; then
        log_success_msg
    elif [ -e ${fileNameTo} ] && [ ! -L ${fileNameTo} ] ; then
        log_success_msg
    else
        log_failure_msg
    fi
}


fileCheck ()
{
    inFile=$1
    echo -n "Checking SSH Key for user $user ..."
    if [ ! -e $inFile ]; then
        echo "Fail"
        echo "Bad File name"
    fi

    while read line
    do
        first=`echo $line | awk '{ print $1 }'`
        second=`echo $line | awk '{ print $2 }'`

        passValue=0
        if [ -f $first ] && [ -f $second ]; then
            newSum=`md5sum $second`
            if [ ${newSum} -eq ${first} ]; then
                sc=0
            else
                sc=1
            fi
        else
            sc=0
        fi

        if [ "$sc" -gt 0 ]; then
           passValue=`expr ${passValue} + 1` 
        fi  
    done < ${inFile}

    if [ ${passValue} -lt 3 ]; then
        __fileCheck=0
        echo "Fail"
        echo "*** Security Alert ***"
        echo "You are using a publicly available default key."
        echo "Please run 'sudo @INSTALL_DIR@/sbin/keygen.sh' to generate a new key to make your system secure."
        echo "***  Security Alert  ***"
    else
        __fileCheck=1
        echo "OK"
    fi

}

createDir ()
{
    _dirPath=$1
    if [ ! -d "${_dirPath}" ]; then
        log_begin_msg "Creating ${_dirPath} directory..."
        if mkdir -p ${_dirPath} 2>/dev/null; then
            log_end_msg 1
            return 1
        fi
        if chown $user:$group ${_dirPath} 2>/dev/null; then
            log_end_msg 1
            return 1
        fi
        log_end_msg 0
    fi
    return 0
}

#---------------------------------------------------------------------
# Main code
#---------------------------------------------------------------------

add_user @RUNTIME_USER@ @RUNTIME_GROUP@ @HOME_PATH@ || exit 1

# If user already exists get the home directory
homePath=`cat /etc/passwd | grep -e "^${user}:" | cut -d':' -f6`
homeBase=`dirname $homePath`
echo ""

# installing files
installConfs "environment.conf" $configs/ 1 || exit 1
installConfs "environment.xml" $configs/  1 || exit 1
installConfs "genenvrules.conf" $configs/ 1 || exit 1

installFile "$path@CONFIG_DIR@/version" "@CONFIG_DIR@/version" 1 || exit 1
installFile "$binPath/dfuplus" "/usr/bin/dfuplus" 1 || exit 1
installFile "$binPath/ecl" "/usr/bin/ecl" 1 || exit 1
installFile "$binPath/eclcc" "/usr/bin/eclcc" 1 || exit 1
installFile "$binPath/eclplus" "/usr/bin/eclplus" 1 || exit 1
installFile "$binPath/wuget" "/usr/bin/wuget" 1 || exit 1
installFile "$configs/$environment" "$sourcedir/$environment" 0 "$sourcedir"

# locate sub install files.
if [ -d @INSTALL_DIR@/etc/init.d/install ]; then
    for subInstall in `ls @INSTALL_DIR@/etc/init.d/install`; do
        source @INSTALL_DIR@/etc/init.d/install/${subInstall}
    done
fi

# bash completion
if [ -d @INSTALL_DIR@/etc/bash_completion.d ] && [ -d /etc/bash_completion.d ]; then
    for subInstall in `ls @INSTALL_DIR@/etc/bash_completion.d | grep -v dpkg-tmp`; do
        installFile @INSTALL_DIR@/etc/bash_completion.d/$subInstall /etc/bash_completion.d/$subInstall 1 || exit 1
    done
fi

# Ubuntu Unity Launcher
if [ -f @INSTALL_DIR@/share/hpcc-systems.desktop ] && [ -d /usr/share/applications ]; then
    installFile @INSTALL_DIR@/share/hpcc-systems.desktop /usr/share/applications 1 || exit 1
fi

# SSH config dir
if [ ! -d @HOME_PATH@/.ssh ]; then
    mkdir -p @HOME_PATH@/.ssh
fi

totalFiles=`ls -l @HOME_PATH@/.ssh | head -n 1 | awk '{ print $2 }'`
if [ -d @HOME_PATH@/.ssh ] && [ "$totalFiles" -le 3 ]; then
    installFile "@INSTALL_DIR@/etc/sshkey/.ssh.md5" "@HOME_PATH@/.ssh.md5" 0 || exit 1
    fileCheck "@HOME_PATH@/.ssh.md5"

    if [ ${__fileCheck} -eq 0 ]; then
        installFile "@INSTALL_DIR@/etc/sshkey/.ssh/authorized_keys" "@HOME_PATH@/.ssh/authorized_keys" 0 || exit 1
        installFile "@INSTALL_DIR@/etc/sshkey/.ssh/id_rsa" "@HOME_PATH@/.ssh/id_rsa" 0 || exit 1
        installFile "@INSTALL_DIR@/etc/sshkey/.ssh/id_rsa.pub" "@HOME_PATH@/.ssh/id_rsa.pub" 0 || exit 1
    fi
else
    printf "SSH keys are already installed for user %-15s ..." "$user"
    log_success_msg
fi

#Assigning correct permission for @HOME_PATH@ files
chmod 700 @HOME_PATH@/.ssh
[ -e @HOME_PATH@/.ssh/id_rsa.pub ] && chmod 600 @HOME_PATH@/.ssh/id_rsa.pub
chown -R @RUNTIME_USER@:@RUNTIME_GROUP@ @HOME_PATH@

#TODO: These should be placed directly on the fs instead of inserted into the primary system files
# /etc/sudoers.d/hpcc
# /etc/security/limits.d/hpccsystems-platform
@ADMIN_PATH@/add_conf_settings.sh

confPath=@INSTALL_DIR@@CONFIG_DIR@

if [ -d ${confPath} ]; then
    for i in `find $confPath`
    do 
        if [ -d $confPath/$i ]; then
            if [ -d @CONFIG_DIR@/$i ]; then
                for infile in `find $confPath/$i`
                do
                    cp $confPath/$i/$infile @CONFIG_DIR@/$i/$infile
                done
            else
                mkdir @CONFIG_DIR@/$i
                for infile in `find $confPath/$i`
                do 
                    cp $confPath/$i/$infile @CONFIG_DIR@/$i/$infile
                done
            fi
        fi
    done
fi

chown root:@RUNTIME_GROUP@ @CONFIG_DIR@
chown -R @RUNTIME_USER@:@RUNTIME_GROUP@ @CONFIG_DIR@/*
chmod 775 @CONFIG_DIR@

# initialize systemd support if applicable
which systemctl 2>&1 1>/dev/null && systemctl daemon-reload

createDir @LOG_PATH@
createDir @PID_PATH@
createDir @RUNTIME_PATH@

[ -e  @LOG_PATH@/hpcc-init.debug ] && chown @RUNTIME_USER@:@RUNTIME_GROUP@ @LOG_PATH@/hpcc-init.debug

exit 0
