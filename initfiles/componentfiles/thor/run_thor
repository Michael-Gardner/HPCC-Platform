#!/bin/bash
################################################################################
#    HPCC SYSTEMS software Copyright (C) 2012 HPCC Systems.
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
################################################################################

thorpid=0

source ${INIT_FUNCTIONS} ""

RUN_THOR_PID_NAME="$PID/run_thor.`basename $PWD`.pid"
# prevent two thors starting together
if [ -e $RUN_THOR_PID_NAME ]; then
  oldpid=`cat $RUN_THOR_PID_NAME`
  while ps h $oldpid ; do 
     echo waiting for process $oldpid to finish
     sleep 5
  done
fi
trap "rm -f $RUN_THOR_PID_NAME" exit
echo $$ > $RUN_THOR_PID_NAME

export SENTINEL="thor.sentinel"
while [ 1 ]; do
    # update slaves file in case state of environment has been altered since last run
    daliadmin server=$DALISERVER dfsgroup ${groupName} slaves
    errcode=$?
    if [ 0 != ${errcode} ]; then
    log 'failed to lookup dali group for $groupName'
        exit 1
    fi
    $deploydir/makethorgroup
    sort $instancedir/slaves | uniq > $instancedir/uslaves.start

    log "starting thorslaves ..."

    # Would be simpler, if there was simple way to test if ip is local and get rid of 'localthor' setting
    if [ "$localthor" = "true" ]; then
        slaveip=$(head -n 1 $instancedir/uslaves.start)
        $deploydir/start_slaves $slaveip $THORMASTER $THORMASTERPORT $logdir $instancedir $deploydir $THORNAME $PATH_PRE $logredirect
    else
        nslaves=$( wc -l < $instancedir/uslaves.start )
        log "$deploydir/frunssh $instancedir/uslaves.start \"/bin/sh -c '$deploydir/start_slaves %a $THORMASTER $THORMASTERPORT $logdir $instancedir $deploydir $THORNAME $PATH_PRE $logredirect'\" -i:$SSHidentityfile -u:$SSHusername -pe:$SSHpassword -t:$SSHtimeout -a:$SSHretries -n:$nslaves"
        $deploydir/frunssh $instancedir/uslaves.start "/bin/sh -c '$deploydir/start_slaves %a $THORMASTER $THORMASTERPORT $logdir $instancedir $deploydir $THORNAME $PATH_PRE $logredirect'" -i:$SSHidentityfile -u:$SSHusername -pe:$SSHpassword -t:$SSHtimeout -a:$SSHretries -n:$nslaves 2>&1
        FRUNSSH_RC=$?
        if [[ ${FRUNSSH_RC} -gt 0 ]]; then
          log "Error ${FRUNSSH_RC} in frunssh"
          log "Please check `dirname ${logdir}`/frunssh for more details"
          # clean up any slaves it was able to reach
          log "calling $deploydir/stop_thor $deploydir"
          $deploydir/stop_thor $deploydir
          exit 0
        fi
    fi

    log "thormaster cmd = $instancedir/thormaster_$THORNAME MASTER=$THORMASTER:$THORMASTERPORT"
    nohup $instancedir/thormaster_$THORNAME MASTER=$THORMASTER:$THORMASTERPORT 2> /dev/null 1>/dev/null &

    thorpid=$!
    if [ "$thorpid" -ne "0" ]; then 
        log "thormaster_$THORNAME process started pid = $thorpid"
        
        echo $thorpid > $PID_NAME
        echo $thorpid > $PID_NAME_BASE
        wait $thorpid
        errcode=$?
        if [ "$errcode" -eq "0" ]; then  # allows for CTRL-C or thorstop
            log "thor exited cleanly - script stopping"
            exit 0
        fi
        log "master exited with errorcode = $errcode"
        if [ ! -e $SENTINEL ]; then
            $deploydir/stop_thor $deploydir
            log "$SENTINEL 'has been removed (1) - script stopping"
            exit 0
        fi

        log "stopping thor(slaves) for restart"
        $deploydir/stop_thor $deploydir keep_sentinel

        if [ 0 != $autoSwapNode ]; then
            log "Running autoswap $THORNAME"
            compname=`basename $PWD`
            swapnode auto $DALISERVER $compname
            errcode=$?
            if [ 0 != ${errcode} ]; then
                log "auto swap node failed, errcode=${errcode}"
            fi
        fi
    else
        log "failed to start thormaster$LCR, pausing for 30 seconds"
        sleep 30
    fi
    if [ ! -e $SENTINEL ]; then
        log "$SENTINEL has been removed or thormaster did not fully start - script stopping"
        exit 0
    fi
done
